language ESSENCE' 1.0

letting S be [ [ 1, 2, 3, 4, 5, 6 ], [ 2, 1, 4, 3, 6, 5 ], [ 3, 4, 5, 6, 1, 2 ], [ 4, 3, 6, 5, 2, 1 ], [ 5, 6, 1, 2, 3, 4 ], [ 6, 5, 2, 1, 4, 3 ] ]

letting n be 6

letting perms be [

[ 1, 2, 5, 6, 3, 4 ],

]

letting inverses be [

[ 1, 2, 5, 6, 3, 4 ],

]

find T : matrix indexed by [int(1..n), int(1..n)] of int(1..n)

such that

forAll x : int(1..n) .
  allDiff(T[x,..]),

forAll x,y,z : int(1..n) .
  T[x,S[y,z]]=S[T[x,y],T[S[x,y],z]],

forAll x,y,z : int(1..n) .
  T[T[x,y],T[S[x,y],z]]=T[y,z],

forAll p : int(1..1) .
    flatten( [ T[i,j] | i : int(1..n), j : int(1..n)] )
    <=lex flatten( [ inverses[p,T[perms[p,i],perms[p,j]]] | i : int(1..n), j : int(1..n)] ),

true

